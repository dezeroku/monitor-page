# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.data import Data  # noqa: F401,E501
from swagger_server import util


class Mail(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, recipients: List[str]=None, html_content: str=None, subject: str=None, data: Data=None):  # noqa: E501
        """Mail - a model defined in Swagger

        :param recipients: The recipients of this Mail.  # noqa: E501
        :type recipients: List[str]
        :param html_content: The html_content of this Mail.  # noqa: E501
        :type html_content: str
        :param subject: The subject of this Mail.  # noqa: E501
        :type subject: str
        :param data: The data of this Mail.  # noqa: E501
        :type data: Data
        """
        self.swagger_types = {
            'recipients': List[str],
            'html_content': str,
            'subject': str,
            'data': Data
        }

        self.attribute_map = {
            'recipients': 'recipients',
            'html_content': 'html_content',
            'subject': 'subject',
            'data': 'data'
        }
        self._recipients = recipients
        self._html_content = html_content
        self._subject = subject
        self._data = data

    @classmethod
    def from_dict(cls, dikt) -> 'Mail':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Mail of this Mail.  # noqa: E501
        :rtype: Mail
        """
        return util.deserialize_model(dikt, cls)

    @property
    def recipients(self) -> List[str]:
        """Gets the recipients of this Mail.


        :return: The recipients of this Mail.
        :rtype: List[str]
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients: List[str]):
        """Sets the recipients of this Mail.


        :param recipients: The recipients of this Mail.
        :type recipients: List[str]
        """
        if recipients is None:
            raise ValueError("Invalid value for `recipients`, must not be `None`")  # noqa: E501

        self._recipients = recipients

    @property
    def html_content(self) -> str:
        """Gets the html_content of this Mail.


        :return: The html_content of this Mail.
        :rtype: str
        """
        return self._html_content

    @html_content.setter
    def html_content(self, html_content: str):
        """Sets the html_content of this Mail.


        :param html_content: The html_content of this Mail.
        :type html_content: str
        """
        if html_content is None:
            raise ValueError("Invalid value for `html_content`, must not be `None`")  # noqa: E501

        self._html_content = html_content

    @property
    def subject(self) -> str:
        """Gets the subject of this Mail.


        :return: The subject of this Mail.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject: str):
        """Sets the subject of this Mail.


        :param subject: The subject of this Mail.
        :type subject: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")  # noqa: E501

        self._subject = subject

    @property
    def data(self) -> Data:
        """Gets the data of this Mail.


        :return: The data of this Mail.
        :rtype: Data
        """
        return self._data

    @data.setter
    def data(self, data: Data):
        """Sets the data of this Mail.


        :param data: The data of this Mail.
        :type data: Data
        """

        self._data = data
