# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Attachment(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, filename: str=None, content: str=None, filetype: str=None):  # noqa: E501
        """Attachment - a model defined in Swagger

        :param filename: The filename of this Attachment.  # noqa: E501
        :type filename: str
        :param content: The content of this Attachment.  # noqa: E501
        :type content: str
        :param filetype: The filetype of this Attachment.  # noqa: E501
        :type filetype: str
        """
        self.swagger_types = {
            'filename': str,
            'content': str,
            'filetype': str
        }

        self.attribute_map = {
            'filename': 'filename',
            'content': 'content',
            'filetype': 'filetype'
        }
        self._filename = filename
        self._content = content
        self._filetype = filetype

    @classmethod
    def from_dict(cls, dikt) -> 'Attachment':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Attachment of this Attachment.  # noqa: E501
        :rtype: Attachment
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filename(self) -> str:
        """Gets the filename of this Attachment.


        :return: The filename of this Attachment.
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename: str):
        """Sets the filename of this Attachment.


        :param filename: The filename of this Attachment.
        :type filename: str
        """
        if filename is None:
            raise ValueError("Invalid value for `filename`, must not be `None`")  # noqa: E501

        self._filename = filename

    @property
    def content(self) -> str:
        """Gets the content of this Attachment.


        :return: The content of this Attachment.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content: str):
        """Sets the content of this Attachment.


        :param content: The content of this Attachment.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def filetype(self) -> str:
        """Gets the filetype of this Attachment.


        :return: The filetype of this Attachment.
        :rtype: str
        """
        return self._filetype

    @filetype.setter
    def filetype(self, filetype: str):
        """Sets the filetype of this Attachment.


        :param filetype: The filetype of this Attachment.
        :type filetype: str
        """
        if filetype is None:
            raise ValueError("Invalid value for `filetype`, must not be `None`")  # noqa: E501

        self._filetype = filetype
