# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class CompareRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, first: str=None, second: str=None):  # noqa: E501
        """CompareRequest - a model defined in Swagger

        :param first: The first of this CompareRequest.  # noqa: E501
        :type first: str
        :param second: The second of this CompareRequest.  # noqa: E501
        :type second: str
        """
        self.swagger_types = {
            'first': str,
            'second': str
        }

        self.attribute_map = {
            'first': 'first',
            'second': 'second'
        }
        self._first = first
        self._second = second

    @classmethod
    def from_dict(cls, dikt) -> 'CompareRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CompareRequest of this CompareRequest.  # noqa: E501
        :rtype: CompareRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def first(self) -> str:
        """Gets the first of this CompareRequest.


        :return: The first of this CompareRequest.
        :rtype: str
        """
        return self._first

    @first.setter
    def first(self, first: str):
        """Sets the first of this CompareRequest.


        :param first: The first of this CompareRequest.
        :type first: str
        """
        if first is None:
            raise ValueError("Invalid value for `first`, must not be `None`")  # noqa: E501

        self._first = first

    @property
    def second(self) -> str:
        """Gets the second of this CompareRequest.


        :return: The second of this CompareRequest.
        :rtype: str
        """
        return self._second

    @second.setter
    def second(self, second: str):
        """Sets the second of this CompareRequest.


        :param second: The second of this CompareRequest.
        :type second: str
        """
        if second is None:
            raise ValueError("Invalid value for `second`, must not be `None`")  # noqa: E501

        self._second = second
